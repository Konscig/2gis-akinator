from aiogram import types
from aiogram.dispatcher.dispatcher import Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

from root_packages.api import OpenAIClient, GISClient
from root_packages.state import state_manager
from settings import settings


dp = Dispatcher()
openai_client = OpenAIClient(api_key=settings.openai.api_key, model=settings.openai.model)
gis_client = GISClient(settings.gis.api_key)


@dp.message(CommandStart())
async def start_akinator(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    state_manager.clear_session(user_id)
    state_manager.set_session_state(user_id, "collecting_preferences")
    
    welcome_text = f"""üé≤ –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫–∏–Ω–∞—Ç–æ—Ä –º–µ—Å—Ç!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ. –ë—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ 2–ì–ò–°.

–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π! üìç"""
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", callback_data="request_location")],
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", callback_data="start_without_location")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "request_location")
async def request_location(callback: types.CallbackQuery):
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    
    location_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=location_keyboard
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "start_without_location")
async def start_without_location(callback: types.CallbackQuery):
    await ask_first_question(callback.message, callback.from_user.id)
    await callback.answer()


@dp.message(lambda message: message.location is not None)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    location = message.location
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    state_manager.set_location(user_id, location.latitude, location.longitude)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    from aiogram.types import ReplyKeyboardRemove
    await message.answer(
        f"üìç –û—Ç–ª–∏—á–Ω–æ! –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {location.latitude:.4f}, {location.longitude:.4f}",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await ask_first_question(message, user_id)


async def ask_first_question(message: types.Message, user_id: int):
    session = state_manager.get_or_create_session(user_id)
    
    try:
        question = await openai_client.generate_question(
            session.preferences,
            state_manager.get_conversation_history(user_id, limit=10)
        )
        
        state_manager.add_message(user_id, "assistant", question)
        await message.answer(question)
        
    except Exception as e:
        logging.error(f"Error generating first question: {e}")
        await message.answer("–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –Ω–∞–π—Ç–∏? –†–µ—Å—Ç–æ—Ä–∞–Ω, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –º–∞–≥–∞–∑–∏–Ω—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ?")


@dp.message(lambda message: message.text and not message.text.startswith('/'))
async def handle_user_response(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text
    
    session = state_manager.get_or_create_session(user_id)
    current_state = state_manager.get_session_state(user_id)
    
    if current_state not in ["collecting_preferences", "refining"]:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    state_manager.add_message(user_id, "user", user_text)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        updated_preferences = await openai_client.analyze_user_response(
            user_text, 
            session.preferences
        )
        state_manager.update_preferences(user_id, updated_preferences)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        should_search = await openai_client.should_start_search(updated_preferences)
        
        if should_search:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞", callback_data="start_search")],
                [InlineKeyboardButton(text="‚ùì –ï—â–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="more_questions")]
            ])
            
            await message.answer(
                "–£ –º–µ–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤?",
                reply_markup=keyboard
            )
        else:
            # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            question = await openai_client.generate_question(
                updated_preferences,
                state_manager.get_conversation_history(user_id, limit=10)
            )
            
            state_manager.add_message(user_id, "assistant", question)
            await message.answer(question)
            
    except Exception as e:
        logging.error(f"Error handling user response: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?")


@dp.callback_query(lambda c: c.data == "start_search")
async def start_search(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    session = state_manager.get_or_create_session(user_id)
    
    state_manager.set_session_state(user_id, "searching")
    
    await callback.message.edit_text("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...")
    await callback.answer()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        places = await gis_client.search_places(
            session.preferences,
            session.current_location,
            radius=5000,
            limit=5
        )
        
        if places:
            state_manager.update_search_results(user_id, places)
            await show_search_results(callback.message, places, user_id)
        else:
            await callback.message.answer(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞."
            )
            state_manager.set_session_state(user_id, "collecting_preferences")
            
    except Exception as e:
        logging.error(f"Error during search: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


@dp.callback_query(lambda c: c.data == "more_questions")
async def more_questions(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    session = state_manager.get_or_create_session(user_id)
    
    try:
        question = await openai_client.generate_question(
            session.preferences,
            state_manager.get_conversation_history(user_id, limit=10)
        )
        
        state_manager.add_message(user_id, "assistant", question)
        await callback.message.edit_text(question)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error generating more questions: {e}")
        await callback.message.edit_text("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö!")
        await callback.answer()


async def show_search_results(message: types.Message, places, user_id: int):
    if not places:
        await message.answer("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    results_text = "üéØ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è:\n\n"
    
    for i, place in enumerate(places[:5], 1):
        results_text += f"{i}. {gis_client.format_place_for_user(place)}\n"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –û—Ç–ª–∏—á–Ω–æ!", callback_data="results_good")],
        [InlineKeyboardButton(text="üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="results_bad")],
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")]
    ])
    
    await message.answer(results_text, reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "results_good")
async def results_good(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ!\n\n"
        "–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –µ—â–µ —á—Ç–æ-—Ç–æ? –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞."
    )
    state_manager.clear_session(callback.from_user.id)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "results_bad") 
async def results_bad(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    state_manager.set_session_state(user_id, "refining")
    
    await callback.message.edit_text(
        "–ü–æ–Ω—è—Ç–Ω–æ! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö? "
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫."
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "new_search")
async def new_search(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    state_manager.clear_session(user_id)
    state_manager.set_session_state(user_id, "collecting_preferences")
    
    await callback.message.edit_text(
        "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?"
    )
    await callback.answer()


@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = """ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –ê–∫–∏–Ω–∞—Ç–æ—Ä—É –º–µ—Å—Ç</b>

–Ø –ø–æ–º–æ–≥–∞—é –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥:

üéØ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ó–∞–ø—É—Å—Ç–∏ /start
2. –ü–æ–¥–µ–ª–∏—Å—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
3. –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
4. –ü–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Å—Ç

üìç <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîç <b>–ß—Ç–æ —è —É—á–∏—Ç—ã–≤–∞—é:</b>
‚Ä¢ –¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è (—Ä–µ—Å—Ç–æ—Ä–∞–Ω, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –º–∞–≥–∞–∑–∏–Ω—ã)
‚Ä¢ –¶–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç
‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è
‚Ä¢ –¢–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è

–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - —è –ø–æ–π–º—É! üòä"""

    await message.answer(help_text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.error()
async def error_handler(event, exception):
    logging.error(f"An error occurred: {exception}")
    if hasattr(event, 'message') and event.message:
        await event.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
